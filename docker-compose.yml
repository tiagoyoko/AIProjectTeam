version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: aiprojectteam-postgres
    environment:
      POSTGRES_DB: aiprojectteam
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: aiprojectteam-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: aiprojectteam-api
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/aiprojectteam
      REDIS_URL: redis://redis:6379
    volumes:
      - .:/app
      - /app/node_modules
      - /app/apps/api/node_modules
    command: pnpm --filter @aiprojectteam/api dev
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Web Frontend
  web:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: aiprojectteam-web
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://api:3001
    volumes:
      - .:/app
      - /app/node_modules
      - /app/apps/web/node_modules
      - /app/apps/web/.next
    command: pnpm --filter @aiprojectteam/web dev
    depends_on:
      - api
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    driver: bridge 
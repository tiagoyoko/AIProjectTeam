
# Regras Supabase - AI Project Team

## Configura√ß√£o do Projeto
- **Project ID**: fcmjqihdwhlgfljdewam
- **URL**: https://fcmjqihdwhlgfljdewam.supabase.co
- **Regi√£o**: South America (sa-east-1)

## Supabase e GraphQL

### Cliente e Intera√ß√µes
- Use o cliente Supabase para intera√ß√µes com banco de dados e subscriptions em tempo real
- Implemente Row Level Security (RLS) policies para controle de acesso granular
- Use Supabase Auth para autentica√ß√£o e gerenciamento de usu√°rios
- Aproveite Supabase Storage para uploads e gerenciamento de arquivos
- Use Supabase Edge Functions para endpoints API serverless quando necess√°rio
- Use o cliente GraphQL gerado (GenQL) para intera√ß√µes type-safe com Supabase
- Otimize queries GraphQL para buscar apenas dados necess√°rios
- Use GenQL queries para buscar grandes datasets eficientemente
- Implemente autentica√ß√£o e autoriza√ß√£o adequadas usando Supabase RLS e Policies

## Conven√ß√µes Principais

### 1. Roteamento e Estado
- Confie no Next.js App Router para mudan√ßas de estado e roteamento
- Priorize Web Vitals (LCP, CLS, FID)

### 2. Uso do Cliente
- Minimize uso de 'use client'
- Prefira server components e recursos SSR do Next.js
- Use 'use client' APENAS para acesso √† Web API em componentes pequenos
- Evite usar 'use client' para data fetching ou gerenciamento de estado
- **CR√çTICO**: NUNCA chame createServerSupabaseClient() no n√≠vel da p√°gina durante build
- Use verifica√ß√£o de autentica√ß√£o apenas em Server Actions ou dentro de try/catch

### 3. Estrutura Monorepo
- Siga a estrutura monorepo:
  - Coloque c√≥digo compartilhado no diret√≥rio 'packages'
  - Mantenha c√≥digo espec√≠fico de apps no diret√≥rio 'apps'
  - Use 'packages/shared/src/types/index.ts' como arquivo √∫nico de refer√™ncia para tipos

### 4. Data Fetching e State Management
- Use React Server Components para data fetching quando poss√≠vel
- Implemente o padr√£o preload para prevenir waterfalls
- Aproveite Supabase para sincroniza√ß√£o de dados em tempo real e gerenciamento de estado
- Use Vercel KV para hist√≥rico de chat, rate limiting e armazenamento de sess√£o quando apropriado

### 5. Patterns de Build-Safe
- Use verifica√ß√£o de environment em runtime, n√£o build time
- Evite chamadas de cliente Supabase durante SSG/build
- Prefira middleware para verifica√ß√£o de autentica√ß√£o em p√°ginas
- Use loading states para verifica√ß√£o client-side de auth

## Seguran√ßa e Autentica√ß√£o

### üîê Regras de Seguran√ßa Cr√≠ticas
- **NUNCA** exponha Service Role Key no frontend
- Use apenas Public (anon) key no lado cliente
- Armazene keys sens√≠veis em `.env.local` (nunca commitado)
- Use `NEXT_PUBLIC_` apenas para dados p√∫blicos
- Sempre habilite RLS para tabelas sens√≠veis
- Implemente MFA obrigat√≥rio para usu√°rios
- Configure verifica√ß√£o de email obrigat√≥ria

### üîí Row-Level Security (RLS)
- Configure RLS perform√°tico com cache
- Use `(SELECT auth.uid())` para otimiza√ß√£o
- Implemente pol√≠ticas granulares por opera√ß√£o
- Teste pol√≠ticas com diferentes contextos
- Use RLS para SELECT, Server Actions para mutations

## Estrutura de Dados

### üóÑÔ∏è Tipagem e Schema
- **SEMPRE** use surrogate keys (UUIDs) como primary keys
- Defina tipos TypeScript a partir de schemas Supabase
- Use `supabase gen types typescript` para gerar tipos automaticamente
- Valide dados com Zod antes de inserir no banco
- Configure foreign keys e constraints rigorosamente
- Use enums PostgreSQL para valores fixos
- Implemente triggers para audit logs

### üìã Tabelas Implementadas
```sql
-- Schema atual do projeto
users, projects, tasks, agents, knowledge_base, 
conversations, messages, audit_logs

-- Enums PostgreSQL
user_role, project_status, task_status, priority_level,
agent_type, content_type, message_type, sender_type, conversation_status
```

## Integra√ß√£o TypeScript

### üì¶ Cliente Configurado
```typescript
// lib/supabase/client.ts - Frontend
import { createClient } from '@supabase/supabase-js'
import { Database } from '@/types/database'

export const supabase = createClient<Database>(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
)

// lib/supabase/server.ts - Server Actions
import { createClient } from '@supabase/supabase-js'
import { Database } from '@/types/database'

export const supabaseServer = createClient<Database>(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)
```

### üîß Server Actions e Valida√ß√£o
```typescript
'use server'
import { UserInsertSchema } from '@/schemas'
import { supabaseServer } from '@/lib/supabase/server'

export async function createUser(data: unknown) {
  const validatedData = UserInsertSchema.parse(data)
  
  const { data: user, error } = await supabaseServer
    .from('users')
    .insert(validatedData)
    .select()
    .single()
    
  if (error) throw error
  return user
}
```

### üîÑ Data Fetching Patterns
```typescript
// Server Component - Data fetching preferido
export default async function ProjectsPage() {
  const { data: projects } = await supabase
    .from('projects')
    .select('*')
    .order('created_at', { ascending: false })
  
  return <ProjectsList projects={projects} />
}

// Preload pattern para prevenir waterfalls
export async function preloadProjects() {
  void supabase.from('projects').select('*')
}

// Real-time subscriptions (use client)
'use client'
export function useRealtimeProjects() {
  const [projects, setProjects] = useState([])
  
  useEffect(() => {
    const subscription = supabase
      .channel('projects')
      .on('postgres_changes', 
        { event: '*', schema: 'public', table: 'projects' },
        (payload) => {
          // Atualizar estado em tempo real
        }
      )
      .subscribe()
      
    return () => subscription.unsubscribe()
  }, [])
  
  return projects
}
```

## Performance e Funcionalidades

### üöÄ Vector Database (pgvector)
- Configure dimens√µes adequadas para embeddings (1536 para OpenAI)
- Use indexes HNSW para performance
- Implemente similarity search otimizada com fun√ß√£o `match_knowledge_base()`
- Configure batch processing para embeddings
- Use triggers para atualiza√ß√£o autom√°tica

### üìä Fun√ß√µes Implementadas
- `match_knowledge_base()` - Busca sem√¢ntica
- `get_project_stats()` - Estat√≠sticas de projeto
- `create_audit_log()` - Sistema de auditoria
- `update_conversation_last_message()` - Timestamp de conversas

### üîÑ Migrations e Deploy
- Use migrations para todas as mudan√ßas de schema
- Versionamento sem√¢ntico para migrations
- Teste migrations em ambiente staging
- Configure rollback autom√°tico se necess√°rio
- Documente breaking changes

### ‚ö° State Management e Cache
- **Supabase Realtime**: Para sincroniza√ß√£o de estado em tempo real
- **Vercel KV**: Para cache de sess√µes, rate limiting e hist√≥rico de chat
- **React Server Components**: Para reduzir JavaScript no cliente
- **Preload Pattern**: Para prevenir waterfalls de requisi√ß√µes

```typescript
// Exemplo Vercel KV para chat history
import { kv } from '@vercel/kv'

export async function saveChatMessage(userId: string, message: string) {
  const key = `chat:${userId}`
  await kv.lpush(key, JSON.stringify({
    message,
    timestamp: Date.now()
  }))
  
  // Rate limiting
  const rateLimitKey = `rate:${userId}`
  const count = await kv.incr(rateLimitKey)
  if (count === 1) {
    await kv.expire(rateLimitKey, 60) // 1 minuto
  }
  
  return count <= 10 // Max 10 mensagens por minuto
}
```

## Comandos Essenciais

```bash
# Gerar tipos TypeScript
supabase gen types typescript --project-id fcmjqihdwhlgfljdewam > packages/shared/src/types/database.ts

# Validar configura√ß√£o
pnpm type-check && pnpm build

# Testar conex√£o (via MCP tools)
# Use ferramentas MCP Supabase para opera√ß√µes
```

## Vari√°veis de Ambiente

```bash
# .env.local (nunca commitado)
NEXT_PUBLIC_SUPABASE_URL=https://fcmjqihdwhlgfljdewam.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJ...
SUPABASE_SERVICE_ROLE_KEY=eyJ... # Pendente configura√ß√£o

# Vercel KV para cache e rate limiting
KV_REST_API_URL=your_kv_url
KV_REST_API_TOKEN=your_kv_token

# .env.example (commitado)
NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_anon_key
SUPABASE_SERVICE_ROLE_KEY=your_service_role_key
KV_REST_API_URL=your_kv_url
KV_REST_API_TOKEN=your_kv_token
```

## Estado Atual - PROBLEMAS CR√çTICOS RESOLVIDOS

### ‚ö†Ô∏è PROBLEMAS IDENTIFICADOS E RESOLVIDOS
1. **Build Failure**: createServerSupabaseClient() chamado durante build em pages
2. **SSR Auth Check**: Verifica√ß√£o de autentica√ß√£o durante build causando erro
3. **Port Conflicts**: M√∫ltiplos processos Next.js rodando na porta 3000
4. **Environment Variables**: Vari√°veis n√£o dispon√≠veis durante build time

### ‚úÖ Implementado e Funcionando
- Projeto Supabase criado e configurado ‚úÖ
- 8 tabelas principais + 9 enums ‚úÖ
- Vector database com pgvector ‚úÖ
- Audit logs autom√°ticos ‚úÖ
- Tipos TypeScript gerados ‚úÖ
- Clientes frontend e server configurados ‚úÖ
- 40+ √≠ndices de performance ‚úÖ
- Fun√ß√µes customizadas implementadas ‚úÖ
- AuthWrapper para separa√ß√£o Client/Server ‚úÖ
- Resolu√ß√£o de conflitos de porta ‚úÖ

### üîÑ Corre√ß√µes em Andamento
- Remo√ß√£o de auth checks durante build ‚ö†Ô∏è
- Migra√ß√£o para middleware auth ‚ö†Ô∏è
- Client-side auth verification ‚ö†Ô∏è

### ‚úÖ Padr√µes de Build Corretos
```typescript
// ‚ùå ERRADO - Falha no build
export default async function LoginPage() {
  const supabase = createServerSupabaseClient()
  const { data: { user } } = await supabase.auth.getUser()
  // ... resto
}

// ‚úÖ CORRETO - Build seguro
export default function LoginPage() {
  return (
    <div>
      <AuthCheckWrapper>
        <LoginForm />
      </AuthCheckWrapper>
    </div>
  )
}

// ‚úÖ CORRETO - Server Action
'use server'
export async function serverAction() {
  try {
    const supabase = createServerSupabaseClient()
    // ... l√≥gica segura
  } catch (error) {
    // Handle gracefully
  }
}
```

- Backup e recovery procedures
- Implementa√ß√£o de preload patterns
- Sistema de rate limiting para WhatsApp

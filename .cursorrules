# Cursor Rules - AI Project Team

## Configura√ß√£o Geral
- **Idioma**: Sempre responder em portugu√™s brasileiro (pt-BR)
- **Framework**: Next.js 14 + React 18 + TypeScript
- **Backend**: Supabase (PostgreSQL + pgvector + Auth)
- **Estilo**: Tailwind CSS v3
- **Monorepo**: Turborepo + pnpm workspaces
- **Comunica√ß√£o**: WhatsApp obrigat√≥rio para intera√ß√£o com agentes

## Regras Supabase - Backend Database

### üîê Seguran√ßa e Autentica√ß√£o
- **NUNCA** exponha Service Role Key no frontend
- Use apenas Public (anon) key no lado cliente
- Armazene keys sens√≠veis em `.env.local` (nunca commitado)
- Use `NEXT_PUBLIC_` apenas para dados p√∫blicos
- Sempre habilite RLS para tabelas sens√≠veis
- Implemente MFA obrigat√≥rio para usu√°rios
- Configure verifica√ß√£o de email obrigat√≥ria

### üóÑÔ∏è Tipagem e Schema do Banco
- **SEMPRE** use surrogate keys (UUIDs) como primary keys
- Defina tipos TypeScript a partir de schemas Supabase
- Use `supabase gen types typescript` para gerar tipos automaticamente
- Valide dados com Zod antes de inserir no banco
- Configure foreign keys e constraints rigorosamente
- Use enums PostgreSQL para valores fixos
- Implemente triggers para audit logs

### üìã Estrutura de Tabelas Padr√£o
```sql
-- Exemplo de tabela com tipagem adequada
CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email TEXT UNIQUE NOT NULL,
  name TEXT NOT NULL,
  role user_role DEFAULT 'user',
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Enum para roles
CREATE TYPE user_role AS ENUM ('user', 'admin', 'agent');
```

### üîí Row-Level Security (RLS)
- Configure RLS perform√°tico com cache
- Use `(SELECT auth.uid())` para otimiza√ß√£o
- Implemente pol√≠ticas granulares por opera√ß√£o
- Teste pol√≠ticas com diferentes contextos
- Use RLS para SELECT, Server Actions para mutations

### üèóÔ∏è Arquitetura de Dados
- Separe dados por tenant usando RLS
- Use schemas separados para diferentes dom√≠nios
- Implemente soft deletes com `deleted_at`
- Configure indexes para queries frequentes
- Use views para queries complexas reutiliz√°veis

### üì¶ Integra√ß√£o TypeScript
```typescript
// types/database.ts - Gerado automaticamente
export interface Database {
  public: {
    Tables: {
      users: {
        Row: {
          id: string
          email: string
          name: string
          role: 'user' | 'admin' | 'agent'
          created_at: string
          updated_at: string
        }
        Insert: {
          id?: string
          email: string
          name: string
          role?: 'user' | 'admin' | 'agent'
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          email?: string
          name?: string
          role?: 'user' | 'admin' | 'agent'
          updated_at?: string
        }
      }
    }
  }
}

// lib/supabase/client.ts
import { createClient } from '@supabase/supabase-js'
import { Database } from '@/types/database'

export const supabase = createClient<Database>(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
)
```

### üîß Server Actions e Valida√ß√£o
```typescript
// schemas/user.ts
import { z } from 'zod'

export const UserInsertSchema = z.object({
  email: z.string().email('Email inv√°lido'),
  name: z.string().min(1, 'Nome obrigat√≥rio'),
  role: z.enum(['user', 'admin', 'agent']).default('user')
})

export type UserInsert = z.infer<typeof UserInsertSchema>

// actions/user.ts
'use server'
import { UserInsertSchema } from '@/schemas/user'
import { supabase } from '@/lib/supabase/server'

export async function createUser(data: unknown) {
  const validatedData = UserInsertSchema.parse(data)
  
  const { data: user, error } = await supabase
    .from('users')
    .insert(validatedData)
    .select()
    .single()
    
  if (error) throw error
  return user
}
```

### üöÄ Performance e Monitoramento
- Configure connection pooling adequado
- Use prepared statements para queries frequentes
- Implemente cache Redis para dados est√°ticos
- Configure monitoring de performance
- Use explain analyze para otimizar queries

### üìä Vector Database (pgvector)
- Configure dimens√µes adequadas para embeddings
- Use indexes HNSW para performance
- Implemente similarity search otimizada
- Configure batch processing para embeddings
- Use triggers para atualiza√ß√£o autom√°tica

### üîÑ Migrations e Deploy
- Use migrations para todas as mudan√ßas de schema
- Versionamento sem√¢ntico para migrations
- Teste migrations em ambiente staging
- Configure rollback autom√°tico se necess√°rio
- Documente breaking changes

### üõ°Ô∏è Backup e Recovery
- Configure backup autom√°tico di√°rio
- Teste procedures de recovery regularmente
- Implemente point-in-time recovery
- Configure replica√ß√£o para alta disponibilidade
- Monitore espa√ßo de storage

### üìà Escalabilidade
- Use read replicas para queries pesadas
- Implemente sharding por tenant se necess√°rio
- Configure auto-scaling baseado em m√©tricas
- Use CDN para assets est√°ticos
- Otimize queries N+1 com joins adequados

## Estrutura de Arquivos
```
project/
‚îú‚îÄ‚îÄ app/                 # Next.js App Router
‚îú‚îÄ‚îÄ components/          # Componentes React
‚îú‚îÄ‚îÄ lib/
‚îÇ   ‚îú‚îÄ‚îÄ supabase/       # Cliente e configura√ß√µes
‚îÇ   ‚îî‚îÄ‚îÄ utils/          # Utilit√°rios gerais
‚îú‚îÄ‚îÄ types/
‚îÇ   ‚îú‚îÄ‚îÄ database.ts     # Tipos gerados do Supabase
‚îÇ   ‚îî‚îÄ‚îÄ schemas.ts      # Schemas Zod
‚îú‚îÄ‚îÄ actions/            # Server Actions
‚îú‚îÄ‚îÄ hooks/              # Custom hooks
‚îî‚îÄ‚îÄ migrations/         # SQL migrations
```

## Comandos Essenciais
```bash
# Gerar tipos TypeScript
supabase gen types typescript --project-id YOUR_PROJECT_ID > types/database.ts

# Aplicar migrations
supabase db push

# Reset local database
supabase db reset

# Executar migrations
supabase migration up
```

## Vari√°veis de Ambiente
```bash
# .env.local (nunca commitado)
SUPABASE_SERVICE_ROLE_KEY=eyJ...
SUPABASE_DB_WEBHOOK_SECRET=super_secret_key

# .env (commitado)
NEXT_PUBLIC_SUPABASE_URL=https://xxx.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJ...
```

## Valida√ß√£o Obrigat√≥ria
- Toda entrada de dados deve ser validada com Zod
- Tipos TypeScript devem ser gerados automaticamente
- RLS deve ser testado com dados de diferentes usu√°rios
- Migrations devem ser testadas em staging primeiro
- Performance deve ser monitorada continuamente 